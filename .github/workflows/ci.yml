name: CI

on:
  push:
  pull_request:

jobs:
  proto-build-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Python protoc plugins
        run: |
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools
      - name: Generate Python stubs
        run: |
          mkdir -p gen/python
          python -m grpc_tools.protoc -I proto \
            --python_out=gen/python \
            --grpc_python_out=gen/python \
            proto/telemetry.proto proto/detections.proto
      - name: Sanity import
        run: |
          python -c "import sys, pathlib; sys.path.insert(0, str(pathlib.Path('gen/python').resolve())); import telemetry_pb2, telemetry_pb2_grpc, detections_pb2, detections_pb2_grpc; print('Imports OK')"

  e2e-smoke:
    needs: proto-build-python
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      # Python runtime for server/client
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install runtime deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools

      # --- Use your PowerShell scripts ---
      - name: Generate Python stubs (PowerShell)
        shell: pwsh
        run: |
          mkdir -p gen/python
          python -m grpc_tools.protoc -I proto \
            --python_out=gen/python \
            --grpc_python_out=gen/python \
            proto/telemetry.proto proto/detections.proto

      - name: Make dev certs for mTLS (PowerShell)
        shell: pwsh
        run: .\scripts\make_certs.ps1

      - name: List generated stubs (debug)
        run: ls -la gen/python || true

      # --- Launch Ground with TLS ---
      - name: Launch Ground (bg, TLS)
        shell: bash
        run: |
          set -euo pipefail
          export PYTHONPATH="$(pwd)/gen/python"
          export TLS=1 CERT_DIR=creds
          python -u -m ground.server > ground.log 2>&1 &
          echo $! > ground.pid
          sleep 2
          head -n 50 ground.log || true

      - name: Wait for :50051
        shell: bash
        run: |
          python - <<'PY'
          import socket,time,sys
          a=("127.0.0.1",50051)
          for _ in range(90):
            try:
              with socket.create_connection(a, timeout=1.0):
                print("Ground is up on 127.0.0.1:50051"); sys.exit(0)
            except OSError: time.sleep(1)
          print("ERROR: Ground did not start in time", file=sys.stderr)
          sys.exit(1)
          PY

      - name: Show ground.log on failure
        if: failure()
        run: |
          echo "===== ground.log (last 200 lines) ====="
          tail -n 200 ground.log || true

      # --- Python Edge (TLS) ---
      - name: Run Python Edge (TLS)
        shell: bash
        run: |
          set -euo pipefail
          export PYTHONPATH="$(pwd)/gen/python"
          export TLS=1 CERT_DIR=creds
          ( python -u -m edge.client 2>&1 | tee edge_py.log ; test ${PIPESTATUS[0]} -eq 0 )

      - name: Verify Python acks
        shell: bash
        run: |
          grep -q "\[edge\] telemetry ack=True" edge_py.log
          grep -q "\[edge\] detections ack=True" edge_py.log

      # --- Optional Node Edge (TLS) ---
      - uses: actions/setup-node@v4
        if: ${{ hashFiles('edge-node/client.js') != '' }}
        with:
          node-version: "18"

      - name: Node install
        if: ${{ hashFiles('edge-node/client.js') != '' }}
        working-directory: edge-node
        run: npm ci || npm install --no-audit --no-fund

      - name: Run Node Edge (TLS)
        if: ${{ hashFiles('edge-node/client.js') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          export TLS=1 CERT_DIR=creds
          ( node edge-node/client.js 2>&1 | tee edge_node.log ; test ${PIPESTATUS[0]} -eq 0 )

      - name: Verify Node acks
        if: ${{ hashFiles('edge-node/client.js') != '' }}
        shell: bash
        run: |
          grep -q "\[node-edge\] telemetry ack= true" edge_node.log
          grep -q "\[node-edge\] detections ack= true" edge_node.log

      # --- Teardown & artifacts ---
      - name: Stop Ground
        if: always()
        shell: bash
        run: |
          if [ -f ground.pid ]; then echo "Killing Ground PID $(cat ground.pid)"; kill $(cat ground.pid) || true; sleep 1; fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-logs
          path: |
            ground.log
            edge_py.log
            edge_node.log
          if-no-files-found: ignore

