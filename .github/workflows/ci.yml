name: CI

on:
  push:
  pull_request:

jobs:
  proto-build-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Python protoc plugins
        run: |
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools
      - name: Generate Python stubs
        run: |
          mkdir -p gen/python
          python -m grpc_tools.protoc -I proto \
            --python_out=gen/python \
            --grpc_python_out=gen/python \
            proto/telemetry.proto proto/detections.proto
      - name: Sanity import
        run: |
          python -c "import sys, pathlib; sys.path.insert(0, str(pathlib.Path('gen/python').resolve())); import telemetry_pb2, telemetry_pb2_grpc, detections_pb2, detections_pb2_grpc; print('Imports OK')"

  e2e-smoke:
    needs: proto-build-python
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Create venv + deps
        shell: pwsh
        run: |
          py -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools

      - name: Generate Python stubs (PowerShell)
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          .\scripts\make_proto.ps1
          python -c "import sys, pathlib; sys.path.insert(0, str(pathlib.Path('gen/python').resolve())); import telemetry_pb2, telemetry_pb2_grpc, detections_pb2, detections_pb2_grpc; print('Imports OK')"

      - name: Make test certs
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          .\scripts\make_certs.ps1
          Get-ChildItem creds

      # Launch Ground (bg) with mTLS and real log files
      - name: Launch Ground (bg, TLS)
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          $root = Get-Location
          Write-Host "root: $root"
          # Use absolute paths for PYTHONPATH and CERT_DIR to avoid issues with working directory changes
          $env:PYTHONPATH = (Join-Path $root 'gen\python')
          Write-Host "PYTHONPATH: $($env:PYTHONPATH)"
          $env:TLS = "1"
          $env:CERT_DIR = (Join-Path $root 'creds')
          Write-Host "CERT_DIR: $($env:CERT_DIR)"
          $env:HOST = "127.0.0.1"
          $env:PORT = "50051"
          $env:GRPC_VERBOSITY = "DEBUG"
          $env:GRPC_TRACE = "handshaker,security_handshaker,tcp"

          # Clean previous run artifacts
          Remove-Item -ErrorAction SilentlyContinue ground.out.log,ground.err.log,ground.pid

          $p = Start-Process -FilePath .\.venv\Scripts\python.exe `
            -ArgumentList '-u','-m','ground.server' `
            -WorkingDirectory $root `
            -NoNewWindow `
            -RedirectStandardOutput (Join-Path $root 'ground.out.log') `
            -RedirectStandardError  (Join-Path $root 'ground.err.log') `
            -PassThru

          $p.Id | Out-File -FilePath (Join-Path $root 'ground.pid') -Encoding ascii -NoNewline
          Write-Host "Ground PID: $($p.Id)"
          Write-Host "Ground Address: $($env:HOST):$($env:PORT)"

          Start-Sleep -Seconds 2
          if (-not (Get-Process -Id $p.Id -ErrorAction SilentlyContinue)) {
            Write-Host "Ground process exited early."
            Write-Host "===== ground.err.log (tail) ====="
            Get-Content (Join-Path $root 'ground.err.log') -Tail 200 -ErrorAction SilentlyContinue
            throw "Ground failed to start"
          }

          # Probe Ground until READY over mTLS
          Write-Host "Probing Ground until READY over mTLS..."
          $max = 6
          for ($i=1; $i -le $max; $i++) {
            Write-Host "[wait] mTLS probe attempt $i/$max"
            python -u scripts/probe_tls.py
            if ($LASTEXITCODE -eq 0) {
              Write-Host "[wait] Ground is READY (mTLS)"
              break
            }
            Start-Sleep -Seconds 5
            if ($i -eq $max) {
              Write-Host "===== ground.out.log (tail) ====="
              Get-Content (Join-Path $root 'ground.out.log') -Tail 200 -ErrorAction SilentlyContinue
              Write-Host "===== ground.err.log (tail) ====="
              Get-Content (Join-Path $root 'ground.err.log') -Tail 200 -ErrorAction SilentlyContinue
              throw "Ground did not become READY over mTLS in time"
            }
          }

          Write-Host "Starting Edge clientâ€¦"
          python -u -m edge.client 2>&1 | Tee-Object (Join-Path $root 'edge_py.log')

          if ($LASTEXITCODE -ne 0) {
            Write-Host "===== edge_py.log ====="
            Get-Content (Join-Path $root 'edge_py.log') -ErrorAction SilentlyContinue
            throw "Edge client failed with exit code $LASTEXITCODE"
          }

      - name: Verify acks
        shell: pwsh
        run: |
          Write-Host "Verifying acknowledgments in edge_py.log..."
          
          $telemetryAck = Select-String -Path edge_py.log -Pattern "\[edge\] telemetry ack=True" -Quiet
          $detectionsAck = Select-String -Path edge_py.log -Pattern "\[edge\] detections ack=True" -Quiet
          
          if (-not $telemetryAck) {
              Write-Error "Telemetry acknowledgment not found in logs"
              Get-Content edge_py.log | Out-Host
              exit 1
          }
          
          if (-not $detectionsAck) {
              Write-Error "Detections acknowledgment not found in logs"
              Get-Content edge_py.log | Out-Host
              exit 1
          }
          
          Write-Host "All acknowledgments verified successfully"

      - name: Show logs on failure
        if: failure()
        shell: pwsh
        run: |
          Write-Host "===== ground.out.log (last 200) ====="
          Get-Content ground.out.log -Tail 200 -ErrorAction SilentlyContinue | Out-Host
          Write-Host "===== ground.err.log (last 200) ====="
          Get-Content ground.err.log -Tail 200 -ErrorAction SilentlyContinue | Out-Host
          Write-Host "===== edge_py.log (last 200) ====="
          Get-Content edge_py.log -Tail 200 -ErrorAction SilentlyContinue | Out-Host
          Write-Host "===== netstat :50051 ====="
          netstat -ano | Select-String -Pattern ":50051" | Out-Host
      
      # Teardown
      - name: Stop Ground
        if: always()
        shell: pwsh
        run: |
          if (Test-Path ground.pid) {
            $groundPid = [int](Get-Content ground.pid)
            Write-Host "Stopping Ground PID $groundPid"
            Stop-Process -Id $groundPid -ErrorAction SilentlyContinue
            Write-Host "Ground server stopped"
          }

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-logs
          path: |
            ground.out.log
            ground.err.log
            edge_py.log