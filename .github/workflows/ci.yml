name: CI

on:
  push:
  pull_request:

jobs:
  proto-build-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Python protoc plugins
        run: |
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools
      - name: Generate Python stubs
        run: |
          mkdir -p gen/python
          python -m grpc_tools.protoc -I proto \
            --python_out=gen/python \
            --grpc_python_out=gen/python \
            proto/telemetry.proto proto/detections.proto
      - name: Sanity import
        run: |
          python -c "import sys, pathlib; sys.path.insert(0, str(pathlib.Path('gen/python').resolve())); import telemetry_pb2, telemetry_pb2_grpc, detections_pb2, detections_pb2_grpc; print('Imports OK')"

  e2e-smoke:
    needs: proto-build-python
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Create venv + deps
        shell: pwsh
        run: |
          py -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools

      - name: Generate Python stubs (PowerShell)
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          .\scripts\make_proto.ps1
          python -c "import sys, pathlib; sys.path.insert(0, str(pathlib.Path('gen/python').resolve())); import telemetry_pb2, telemetry_pb2_grpc, detections_pb2, detections_pb2_grpc; print('Imports OK')"

      - name: Make test certs
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          .\scripts\make_certs.ps1
          Get-ChildItem creds

      # Launch Ground (bg) with mTLS and real log files
      - name: Launch Ground (bg, TLS)
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1

          # mTLS env
          $env:PYTHONPATH = (Join-Path (Get-Location) 'gen\python')
          $env:TLS = "1"
          $env:CERT_DIR = (Join-Path (Get-Location) 'creds')
          $env:HOST = "127.0.0.1"
          $env:PORT = "50051"

          # Optional: turn on gRPC debug on the server
          $env:GRPC_VERBOSITY = "DEBUG"
          $env:GRPC_TRACE = "handshaker,security_handshaker,tcp"

          # clean logs
          Remove-Item ground.out.log, ground.err.log, ground.pid -ErrorAction SilentlyContinue

          $python = ".\.venv\Scripts\python.exe"
          
          # Start Ground server in background
          $p = Start-Process -FilePath $python `
                -ArgumentList '-u','-m','ground.server' `
                -NoNewWindow `
                -RedirectStandardOutput ground.out.log `
                -RedirectStandardError ground.err.log `
                -WorkingDirectory (Get-Location) `
                -PassThru
          
          $p.Id | Out-File ground.pid -Encoding ascii -NoNewline
          Write-Host "Ground server started with PID: $($p.Id)"
          
          # Wait a moment for server to start
          Start-Sleep -Seconds 3
          
          # Check if process is still running
          if (-not (Get-Process -Id $p.Id -ErrorAction SilentlyContinue)) {
              Write-Error "Ground server process died during startup"
              Write-Host "===== ground.out.log ====="
              Get-Content ground.out.log -ErrorAction SilentlyContinue | Out-Host
              Write-Host "===== ground.err.log ====="
              Get-Content ground.err.log -ErrorAction SilentlyContinue | Out-Host
              exit 1
          }
          
          # Show initial logs
          Write-Host "===== ground.out.log (startup) ====="
          Get-Content ground.out.log -ErrorAction SilentlyContinue | Out-Host
          Write-Host "===== ground.err.log (startup) ====="
          Get-Content ground.err.log -ErrorAction SilentlyContinue | Out-Host

      # Wait for Ground to be ready for gRPC connections
      - name: Wait for Ground gRPC readiness
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          $env:PYTHONPATH = (Join-Path (Get-Location) 'gen\python')
          
          Write-Host "Testing gRPC connection readiness..."
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Certificate files:"
          Get-ChildItem creds\*.crt, creds\*.key | Select-Object Name, Length | Out-Host
          
          $maxAttempts = 20
          $delay = 3
          $success = $false
          
          for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
              Write-Host "Attempt $attempt of ${maxAttempts}: Testing gRPC connection..."
              
              # Create a simple gRPC test script with better error handling
              $testScript = @'
          import sys, pathlib, grpc, asyncio, traceback

          print(f"Python version: {sys.version}")
          print(f"Current working directory: {pathlib.Path.cwd()}")

          # Add protobuf stubs to path
          gen_path = pathlib.Path("gen/python").resolve()
          sys.path.insert(0, str(gen_path))
          print(f"Added to Python path: {gen_path}")

          try:
              import telemetry_pb2_grpc
              print("Successfully imported telemetry_pb2_grpc")
          except ImportError as e:
              print(f"Failed to import protobuf stubs: {e}")
              traceback.print_exc()
              sys.exit(2)

          async def test_connection():
              try:
                  cert_dir = pathlib.Path("creds")
                  print(f"Certificate directory: {cert_dir.resolve()}")
                  
                  # Check certificate files exist
                  ca_file = cert_dir / "ca.crt"
                  client_key_file = cert_dir / "client.key"
                  client_crt_file = cert_dir / "client.crt"
                  
                  for cert_file in [ca_file, client_key_file, client_crt_file]:
                      if not cert_file.exists():
                          print(f"ERROR: Certificate file missing: {cert_file}")
                          return False
                      else:
                          print(f"Found certificate: {cert_file.name} ({cert_file.stat().st_size} bytes)")
                  
                  # Load certificates
                  ca = ca_file.read_bytes()
                  client_key = client_key_file.read_bytes()
                  client_crt = client_crt_file.read_bytes()
                  print("Certificates loaded successfully")
                  
                  # Create credentials
                  creds = grpc.ssl_channel_credentials(
                      root_certificates=ca,
                      private_key=client_key,
                      certificate_chain=client_crt,
                  )
                  print("SSL credentials created")
                  
                  # Create channel with proper options
                  options = [("grpc.ssl_target_name_override", "localhost")]
                  channel = grpc.aio.secure_channel("127.0.0.1:50051", creds, options=options)
                  print("Secure channel created")
                  
                  # Test channel readiness
                  print("Testing channel readiness...")
                  await asyncio.wait_for(channel.channel_ready(), timeout=5.0)
                  print("gRPC channel ready")
                  return True
                  
              except asyncio.TimeoutError:
                  print("Timeout waiting for channel ready")
                  return False
              except Exception as e:
                  print(f"gRPC test failed: {type(e).__name__}: {e}")
                  traceback.print_exc()
                  return False
              finally:
                  try:
                      await channel.close()
                      print("Channel closed")
                  except:
                      pass

          if __name__ == "__main__":
              try:
                  result = asyncio.run(test_connection())
                  sys.exit(0 if result else 1)
              except Exception as e:
                  print(f"FATAL ERROR: {type(e).__name__}: {e}")
                  traceback.print_exc()
                  sys.exit(2)
          '@
                        
              Set-Content -Path "test_grpc.py" -Value $testScript -Encoding UTF8
              
              Write-Host "Running gRPC test..."
              try {
                  python test_grpc.py 2>&1 | Out-Host
                  if ($LASTEXITCODE -eq 0) {
                      Write-Host "gRPC connection successful!"
                      $success = $true
                      break
                  } else {
                      Write-Host "gRPC connection failed (exit code: $LASTEXITCODE)"
                  }
              } catch {
                  Write-Host "gRPC test script execution failed: $($_.Exception.Message)"
              }
              
              if ($attempt -lt $maxAttempts) {
                  Write-Host "Waiting ${delay}s before next attempt..."
                  Start-Sleep -Seconds $delay
              }
          }
          
          if (-not $success) {
              Write-Error "Ground server never became ready for gRPC connections"
              Write-Host "===== Final ground.out.log ====="
              Get-Content ground.out.log -ErrorAction SilentlyContinue | Out-Host
              Write-Host "===== Final ground.err.log ====="
              Get-Content ground.err.log -ErrorAction SilentlyContinue | Out-Host
              Write-Host "===== Final test_grpc.py output (last run) ====="
              if (Test-Path "test_grpc.py") {
                  python test_grpc.py 2>&1 | Out-Host
              }
              exit 1
          }

      # Run Edge client (foreground), log to file
      - name: Run Python Edge (mTLS)
        shell: pwsh
        env:
          TLS: "1"
          CERT_DIR: "creds"
          TLS_OVERRIDE_HOST: "localhost"
        run: |
          .\.venv\Scripts\Activate.ps1
          $env:PYTHONPATH = (Join-Path (Get-Location) 'gen\python')
          
          Write-Host "Starting Edge client..."
          try {
              python -u -m edge.client 2>&1 | Tee-Object edge_py.log
              if ($LASTEXITCODE -ne 0) { 
                  throw "Edge client failed with exit code: $LASTEXITCODE" 
              }
              Write-Host "Edge client completed successfully"
          } catch {
              Write-Host "Edge client failed: $($_.Exception.Message)"
              Write-Host "===== edge_py.log ====="
              Get-Content edge_py.log -ErrorAction SilentlyContinue | Out-Host
              throw
          }

      - name: Verify acks
        shell: pwsh
        run: |
          Write-Host "Verifying acknowledgments in edge_py.log..."
          
          $telemetryAck = Select-String -Path edge_py.log -Pattern "\[edge\] telemetry ack=True" -Quiet
          $detectionsAck = Select-String -Path edge_py.log -Pattern "\[edge\] detections ack=True" -Quiet
          
          if (-not $telemetryAck) {
              Write-Error "Telemetry acknowledgment not found in logs"
              Get-Content edge_py.log | Out-Host
              exit 1
          }
          
          if (-not $detectionsAck) {
              Write-Error "Detections acknowledgment not found in logs"
              Get-Content edge_py.log | Out-Host
              exit 1
          }
          
          Write-Host "All acknowledgments verified successfully"

      - name: Show logs on failure
        if: failure()
        shell: pwsh
        run: |
          Write-Host "===== ground.out.log (last 200) ====="
          Get-Content ground.out.log -Tail 200 -ErrorAction SilentlyContinue | Out-Host
          Write-Host "===== ground.err.log (last 200) ====="
          Get-Content ground.err.log -Tail 200 -ErrorAction SilentlyContinue | Out-Host
          Write-Host "===== edge_py.log (last 200) ====="
          Get-Content edge_py.log -Tail 200 -ErrorAction SilentlyContinue | Out-Host
          Write-Host "===== netstat :50051 ====="
          netstat -ano | Select-String -Pattern ":50051" | Out-Host
      
      # Teardown
      - name: Stop Ground
        if: always()
        shell: pwsh
        run: |
          if (Test-Path ground.pid) {
            $groundPid = [int](Get-Content ground.pid)
            Write-Host "Stopping Ground PID $groundPid"
            Stop-Process -Id $groundPid -ErrorAction SilentlyContinue
            Write-Host "Ground server stopped"
          }

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-logs
          path: |
            ground.out.log
            ground.err.log
            edge_py.log