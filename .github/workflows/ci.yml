name: CI

on:
  push:
  pull_request:

jobs:
  proto-build-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Python protoc plugins
        run: |
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools
      - name: Generate Python stubs
        run: |
          mkdir -p gen/python
          python -m grpc_tools.protoc -I proto \
            --python_out=gen/python \
            --grpc_python_out=gen/python \
            proto/telemetry.proto proto/detections.proto
      - name: Sanity import
        run: |
          python -c "import sys, pathlib; sys.path.insert(0, str(pathlib.Path('gen/python').resolve())); import telemetry_pb2, telemetry_pb2_grpc, detections_pb2, detections_pb2_grpc; print('Imports OK')"

  e2e-smoke:
    needs: proto-build-python
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Create venv + deps
        shell: pwsh
        run: |
          py -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools

      - name: Generate Python stubs (PowerShell)
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          .\scripts\make_proto.ps1
          python -c "import sys, pathlib; sys.path.insert(0, str(pathlib.Path('gen/python').resolve())); import telemetry_pb2, telemetry_pb2_grpc, detections_pb2, detections_pb2_grpc; print('Imports OK')"

      - name: Make test certs
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          .\scripts\make_certs.ps1
          Get-ChildItem creds

      - name: Launch Ground (bg)
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          $env:PYTHONPATH = (Join-Path (Get-Location) 'gen\python')
          # Enable mTLS
          $env:TLS = '1'
          $env:CERT_DIR = 'creds'

          # Clean old logs/PID
          Remove-Item -ErrorAction SilentlyContinue ground.out.log, ground.err.log, ground.pid

          # Start server in background, capture PID
          $proc = Start-Process -FilePath python `
                                -ArgumentList @('-u','-m','ground.server') `
                                -RedirectStandardOutput 'ground.out.log' `
                                -RedirectStandardError  'ground.err.log' `
                                -NoNewWindow -PassThru
          $proc.Id | Out-File -FilePath ground.pid -Encoding ascii -NoNewline

          Start-Sleep -Seconds 2
          Write-Host "===== ground.out.log (head) ====="
          Get-Content ground.out.log -TotalCount 50 -ErrorAction SilentlyContinue | Write-Host


      - name: Wait for Ground TCP :50051
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          $deadline = (Get-Date).AddSeconds(30)
          $ok = $false
          while ((Get-Date) -lt $deadline) {
            if (Test-NetConnection -ComputerName '127.0.0.1' -Port 50051 -InformationLevel Quiet) {
              $ok = $true
              Write-Host "TCP open on 127.0.0.1:50051"
              break
            }
            Start-Sleep -Seconds 1
          }
          if (-not $ok) {
            Write-Host "===== ground.out.log (tail) ====="
            Get-Content ground.out.log -Tail 200 -ErrorAction SilentlyContinue | Write-Host
            Write-Host "===== ground.err.log (tail) ====="
            Get-Content ground.err.log -Tail 200 -ErrorAction SilentlyContinue | Write-Host
            throw "Ground TCP not open in time"
          }


      - name: OpenSSL sanity (client-auth handshake)
        shell: pwsh
        run: |
          # Ensure Git for Windows OpenSSL is available
          $gitUsrBin = 'C:\Program Files\Git\usr\bin'
          if (Test-Path $gitUsrBin) { $env:Path += ";$gitUsrBin" }
          $cmd = 'type NUL | openssl s_client -connect 127.0.0.1:50051 -servername localhost -cert creds\client.crt -key creds\client.key -CAfile creds\ca.crt -verify_return_error -brief -quiet'
          cmd /c $cmd
          if ($LASTEXITCODE -ne 0) { throw "openssl s_client failed with code $LASTEXITCODE" }

      - name: Wait for Ground via gRPC (mTLS probe)
        shell: pwsh
        env:
          CERT_DIR: "creds"
          PROBE_TIMEOUT: "30"
          SNI: "localhost"
        run: |
          .\.venv\Scripts\Activate.ps1
          python -u scripts\probe_tls.py

      - name: Run Python Edge (mTLS)
        shell: pwsh
        env:
          TLS: "1"
          CERT_DIR: "creds"
        run: |
          .\.venv\Scripts\Activate.ps1
          $env:PYTHONPATH = (Join-Path (Get-Location) 'gen\python')
          ( python -u -m edge.client 2>&1 | Tee-Object edge_py.log )
          if ($LASTEXITCODE -ne 0) { throw "edge client failed: $LASTEXITCODE" }

      - name: Verify acks
        shell: pwsh
        run: |
          Select-String -Path edge_py.log -Pattern "\[edge\] telemetry ack=True" -Quiet | Out-Null
          Select-String -Path edge_py.log -Pattern "\[edge\] detections ack=True" -Quiet | Out-Null

      - name: Show logs on failure
        if: failure()
        shell: pwsh
        run: |
          Write-Host "===== ground.out.log (last 200) ====="
          Get-Content ground.out.log -Tail 200 -ErrorAction SilentlyContinue | Out-Host
          Write-Host "===== edge_py.log (last 200) ====="
          Get-Content edge_py.log -Tail 200 -ErrorAction SilentlyContinue | Out-Host

      - name: Stop Ground
        if: always()
        shell: pwsh
        run: |
          if (Test-Path ground.pid) {
            $groundPid = (Get-Content ground.pid | Select-Object -First 1)
            Write-Host "Killing Ground PID $groundPid"
            try { Stop-Process -Id $groundPid -Force -ErrorAction Stop }
            catch { Write-Host "Stop-Process failed: $_" }
          } else {
            Write-Host "No ground.pid found"
          }

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-logs
          path: |
            ground.out.log
            edge_py.log

