name: CI

on:
  push:
  pull_request:

jobs:
  proto-build-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Python protoc plugins
        run: |
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools
      - name: Generate Python stubs
        run: |
          mkdir -p gen/python
          python -m grpc_tools.protoc -I proto \
            --python_out=gen/python \
            --grpc_python_out=gen/python \
            proto/telemetry.proto proto/detections.proto
      - name: Sanity import
        run: |
          python -c "import sys, pathlib; sys.path.insert(0, str(pathlib.Path('gen/python').resolve())); import telemetry_pb2, telemetry_pb2_grpc, detections_pb2, detections_pb2_grpc; print('Imports OK')"

  e2e-smoke:
    needs: proto-build-python
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Create venv + install deps
      - name: Setup venv
        shell: pwsh
        run: |
          py -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools

      # Generate stubs with your PS script (venv ACTIVATED here)
      - name: Generate Python stubs (PowerShell)
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          .\scripts\make_proto.ps1
          Get-ChildItem gen\python | Out-Host

      # Make certs with your PS script (no venv needed, but harmless to activate)
      - name: Make dev certs for mTLS (PowerShell)
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          .\scripts\make_certs.ps1

      # Launch Ground (TLS) using venv python (no activation needed since we call the exe)
      - name: Launch Ground (bg, TLS)
        shell: pwsh
        run: |
          $env:PYTHONPATH = (Join-Path (Get-Location) 'gen\python')
          $env:TLS = "1"; $env:CERT_DIR = "creds"
          $python = ".\.venv\Scripts\python.exe"
          $p = Start-Process -FilePath $python `
                -ArgumentList '-u','-m','ground.server' `
                -NoNewWindow `
                -RedirectStandardOutput ground.log `
                -RedirectStandardError ground.log `
                -PassThru
          $p.Id | Out-File ground.pid -Encoding ascii
          Start-Sleep -Seconds 2
          Get-Content ground.log -TotalCount 50 -ErrorAction SilentlyContinue | Out-Host

      - name: Wait for :50051
        shell: pwsh
        run: |
          $deadline = (Get-Date).AddSeconds(90)
          while ((Get-Date) -lt $deadline) {
            if (Test-NetConnection -ComputerName 127.0.0.1 -Port 50051 -InformationLevel Quiet) {
              Write-Host "Ground is up on 127.0.0.1:50051"
              exit 0
            }
            Start-Sleep -Seconds 1
          }
          Write-Error "Ground did not start in time"
          exit 1

      - name: Show ground.log on failure
        if: failure()
        shell: pwsh
        run: |
          Write-Host "===== ground.log (last 200 lines) ====="
          Get-Content ground.log -Tail 200 -ErrorAction SilentlyContinue | Out-Host

      # Python Edge (TLS) â€” activate venv, then run
      - name: Run Python Edge (TLS)
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          $env:PYTHONPATH = (Join-Path (Get-Location) 'gen\python')
          $env:TLS = "1"; $env:CERT_DIR = "creds"
          python -u -m edge.client 2>&1 | Tee-Object -FilePath edge_py.log
          if ($LASTEXITCODE -ne 0) { Write-Error "Python Edge failed"; exit $LASTEXITCODE }

      - name: Verify Python acks
        shell: pwsh
        run: |
          if (-not (Select-String -Path edge_py.log -Pattern "\[edge\] telemetry ack=True" -Quiet)) { Write-Error "Telemetry ack missing"; exit 1 }
          if (-not (Select-String -Path edge_py.log -Pattern "\[edge\] detections ack=True" -Quiet)) { Write-Error "Detections ack missing"; exit 1 }
          Write-Host "Python Edge acks found."

      # Optional Node Edge (TLS)
      - uses: actions/setup-node@v4
        if: ${{ hashFiles('edge-node/client.js') != '' }}
        with:
          node-version: "18"

      - name: Node install
        if: ${{ hashFiles('edge-node/client.js') != '' }}
        shell: pwsh
        working-directory: edge-node
        run: npm ci || npm install --no-audit --no-fund

      - name: Run Node Edge (TLS)
        if: ${{ hashFiles('edge-node/client.js') != '' }}
        shell: pwsh
        run: |
          $env:TLS = "1"; $env:CERT_DIR = "creds"
          node edge-node\client.js 2>&1 | Tee-Object -FilePath edge_node.log
          if ($LASTEXITCODE -ne 0) { Write-Error "Node Edge failed"; exit $LASTEXITCODE }

      - name: Verify Node acks
        if: ${{ hashFiles('edge-node/client.js') != '' }}
        shell: pwsh
        run: |
          if (-not (Select-String -Path edge_node.log -Pattern "\[node-edge\] telemetry ack= true" -Quiet)) { Write-Error "Node telemetry ack missing"; exit 1 }
          if (-not (Select-String -Path edge_node.log -Pattern "\[node-edge\] detections ack= true" -Quiet)) { Write-Error "Node detections ack missing"; exit 1 }
          Write-Host "Node Edge acks found."

      - name: Stop Ground
        if: always()
        shell: pwsh
        run: |
          if (Test-Path ground.pid) {
            $pid = Get-Content ground.pid
            Write-Host "Killing Ground PID $pid"
            Stop-Process -Id $pid -ErrorAction SilentlyContinue
          }

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-logs
          path: |
            ground.log
            edge_py.log
            edge_node.log
          if-no-files-found: ignore
