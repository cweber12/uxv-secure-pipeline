name: CI

on:
  push:
  pull_request:

jobs:
  proto-build-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Python protoc plugins
        run: |
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools
      - name: Generate Python stubs
        run: |
          mkdir -p gen/python
          python -m grpc_tools.protoc -I proto \
            --python_out=gen/python \
            --grpc_python_out=gen/python \
            proto/telemetry.proto proto/detections.proto
      - name: Sanity import
        run: |
          python -c "import sys, pathlib; sys.path.insert(0, str(pathlib.Path('gen/python').resolve())); import telemetry_pb2, telemetry_pb2_grpc, detections_pb2, detections_pb2_grpc; print('Imports OK')"

  e2e-smoke:
    needs: proto-build-python
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Create venv + deps
        shell: pwsh
        run: |
          py -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install grpcio grpcio-tools

      - name: Generate Python stubs (PowerShell)
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          .\scripts\make_proto.ps1
          python -c "import sys, pathlib; sys.path.insert(0, str(pathlib.Path('gen/python').resolve())); import telemetry_pb2, telemetry_pb2_grpc, detections_pb2, detections_pb2_grpc; print('Imports OK')"

      - name: Make test certs
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          .\scripts\make_certs.ps1
          Get-ChildItem creds

      # Launch Ground (background), log to files, and record PID
      - name: Launch Ground (bg)
        shell: pwsh
        run: |
          .\.venv\Scripts\Activate.ps1
          $env:PYTHONPATH = (Join-Path (Get-Location) 'gen\python')
          $env:TLS = "1"
          $env:CERT_DIR = (Join-Path (Get-Location) 'creds')
          # gRPC debug on server
          $env:GRPC_VERBOSITY = "DEBUG"
          $env:GRPC_TRACE = "handshaker,security_handshaker,tcp,http"

          $psi = New-Object System.Diagnostics.ProcessStartInfo
          $psi.FileName = (Get-Command python).Path
          $psi.Arguments = "-u -m ground.server"
          $psi.WorkingDirectory = (Get-Location).Path
          $psi.UseShellExecute = $false
          $psi.RedirectStandardOutput = $true
          $psi.RedirectStandardError  = $true

          $p = [System.Diagnostics.Process]::Start($psi)
          $p.BeginOutputReadLine()
          $p.BeginErrorReadLine()
          $p.Id | Out-File -Encoding ascii ground.pid

          Start-Sleep -Seconds 1
          if (Test-Path ground.out.log) { Get-Content ground.out.log -Tail 50 -ErrorAction SilentlyContinue | Write-Host }


      # Wait until gRPC mTLS is actually reachable (use your probe)
      - name: Wait for Ground via gRPC (mTLS)
        shell: pwsh
        run: python -u scripts\probe_tls.py --addr 127.0.0.1:50051 --cert-dir $certDir --timeout 10
            

      # Run Edge client (foreground), log to file
      - name: Run Python Edge (mTLS)
        shell: pwsh
        env:
          TLS: "1"
          CERT_DIR: "creds"
        run: |
          .\.venv\Scripts\Activate.ps1
          $env:PYTHONPATH = (Join-Path (Get-Location) 'gen\python')
          ( python -u -m edge.client 2>&1 | Tee-Object edge_py.log )
          if ($LASTEXITCODE -ne 0) { throw "edge client failed: $LASTEXITCODE" }

      - name: Verify acks
        shell: pwsh
        run: |
          Select-String -Path edge_py.log -Pattern "\[edge\] telemetry ack=True" -Quiet | Out-Null
          Select-String -Path edge_py.log -Pattern "\[edge\] detections ack=True" -Quiet | Out-Null

      - name: Show logs on failure
        if: failure()
        shell: pwsh
        run: |
          Write-Host "===== ground.out.log (last 200) ====="
          Get-Content ground.out.log -Tail 200 -ErrorAction SilentlyContinue | Out-Host
          Write-Host "===== edge_py.log (last 200) ====="
          Get-Content edge_py.log -Tail 200 -ErrorAction SilentlyContinue | Out-Host
      
      # Teardown
      - name: Stop Ground
        if: always()
        shell: pwsh
        run: |
          if (Test-Path ground.pid) {
            $gp = [int](Get-Content ground.pid)
            Write-Host "Stopping Ground PID $gp"
            Stop-Process -Id $gp -ErrorAction SilentlyContinue
          }

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-logs
          path: |
            ground.out.log
            edge_py.log

